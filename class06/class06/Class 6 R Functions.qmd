---
title: "Class 6: R Functions"
author: "Jacklyn Jung (PID:A16410001)"
date: 01/25/24
format: pdf
editor: visual
---

## R Functions 

Functions are how we get stuff done. We call functions to do everything useful in R.

One cool thing about R is that it makes writing your own functions comparatively easy. 

All functions in R have at least three things:

- A **name** (we get to pick this)
- One or more **input arguments** (the input to our function)
- The **body** (lines of code that do the work)

```{r}
#| eval: false

funname <- function(input1, input2) {
  # The body with R code
}
```

Let's write a silly first function to add two numbers:

```{r}
x <- 5
y <- 1
x + y 
```

```{r}
addme <- function(x, y=1) {
  x + y
}
```


```{r}
addme(1,1)
```


```{r}
addme(100,100)
```


```{r}
addme(10)
```


## Lab for today

Write a function to grade student work from class. 

Start with a simplified version of the problem: 

```{r}
# Example input vectors to start with 
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Let's just find the average.

```{r}
mean(student1)
mean(student2, na.rm=TRUE)
mean(student3, na.rm=TRUE)
```

This is not fair - there is no way student3 should have mean of 90!

Come back to this NA problem. But things worked for 'student1'.

We want to drop the lowest score before getting the 'mean()'

How do I find the lowest (minimum) score?

```{r}
student1
```

```{r}
min(student1)
```

I found the 'which.min()' function. Maybe this is more useful?

```{r}
which.min(student1)
```

Cool - it is the 8th element of the vector that has the lowest score. Can I remove this one?

```{r}
student1[which.min(student1)]
```


We can use the wee minus trick for indexing. 

```{r}
x <- 1:5
x[-3]
```

Now put these bits of knowledge together to make some code that identifies and drops the lowest score (element of the input vector) and then calculates mean.

```{r}
ind <- which.min(student1)
student1[ind]
student1[-ind]
mean(student1[-ind])
```

Use a common shortcut and use 'x' and my input 

```{r}
x <- student1
mean(x[-which.min(x)])
```

We still have the problem of missing values. 

One idea is to replace NA values with zero. 

```{r}
y <- 1:5
y[y == 3] <- 10000
y
```

Bummer, this is no good...

```{r}
y <- c(1, 2, NA, 4, 5)
y == NA
```


```{r}
y
is.na(y)
```

How can I remove the NA elements from the vector?

```{r}
!c(F,F,F)
#y[is.na(y)]
```

```{r}
y[!is.na(y)]
```

OK let's solve this:

```{r}
x<-student3

# Change NA values to Zero
x[is.na(x)] <- 0
# Find and remove min value and get mean 
mean(x[-which.min(x)])

```

Last step now that I have my working code snippet is to make my 'grade()' function.

```{r}
grade <- function(x) {
  # Change NA values to Zero
x[is.na(x)] <- 0
# Find and remove min value and get mean 
mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Question 1: Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”

Now read the online gradebook (CSV file)

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)

head(gradebook)
```

```{r}
results <- apply(gradebook, 1, grade)
results
```

Question 2: Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
max(results)
which.max(results)
```

Question 3: From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

```{r}
grade2 <- function(x) {
x[is.na(x)] <- 0
mean(x)
}
results2 <- apply (gradebook, 2, grade2)
results2
```

OR

```{r}
apply(gradebook, 2, mean, na.rm=T)
```

OR

```{r}
apply(gradebook, 2, sum, na.rm=T)
```

```{r}
min(results2)
which.min(results2)
```
With the mean, the outliers drive the mean up or down. So sum can give you a more accurate answer. 

Question 4: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
# Make all (or mask) NA to zero
mask <- gradebook
is.na(mask)
mask [is.na(mask)] <- 0
#mask
```

We can use the 'cor()' function for correlation analysis. 

```{r}
cor(mask$hw5, results)
cor(mask$hw3, results)
cor(mask$hw1, results)
cor(mask$hw2, results)
cor(mask$hw4, results)
```


I need to use the 'apply()' function to run this analysis over the whole course (i.e. masked gradebook)

```{r}
apply(mask, 2, cor, results)
```

